version: "3.9"

services:
  api: &api
    build:
      context: .
      dockerfile: Dockerfile
    image: MY_APP_NAME
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - .:/api
    env_file:
      - .env
    expose:
      - "${APP_PORT}"
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.secure.redirectscheme.scheme=https
      - traefik.http.middlewares.response-compress.compress=true
      - traefik.http.routers.api-redirect.rule=HostRegexp(`${DOMAIN}`, `{subdomain:[a-z]+}.${DOMAIN}`) && PathPrefix(`/api`, `/admin`)
      - traefik.http.routers.api-redirect.entrypoints=web
      - traefik.http.routers.api-redirect.middlewares=secure
      - traefik.http.routers.api-redirect.priority=10
      - traefik.http.routers.api.rule=HostRegexp(`${DOMAIN}`, `{subdomain:[a-z]+}.${DOMAIN}`) && PathPrefix(`/api`, `/admin`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.middlewares=response-compress
      - traefik.http.routers.api.priority=10
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=le
      - traefik.http.routers.api.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.api.tls.domains[0].sans=*.${DOMAIN}
    command: uvicorn asgi:app --host 0.0.0.0 --port ${APP_PORT} --proxy-headers --forwarded-allow-ips '*'

  postgres:
    image: postgres:16.2-alpine
    restart: unless-stopped
    expose:
      - "5432"
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - .docker/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7.0.11
    restart: unless-stopped
    expose:
      - "6379"
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - .docker/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2023-07-07T07-13-57Z
    restart: unless-stopped
    expose:
      - "9000"
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - .docker/minio:/data
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.secure.redirectscheme.scheme=https
      - traefik.http.middlewares.response-compress.compress=true
      - traefik.http.routers.minio-redirect.rule=HostRegexp(`${MINIO_DOMAIN}`) && PathPrefix(`/${MINIO_BUCKET_NAME}`)
      - traefik.http.routers.minio-redirect.entrypoints=web
      - traefik.http.routers.minio-redirect.middlewares=secure
      - traefik.http.routers.minio-redirect.priority=10
      - traefik.http.routers.minio.rule=HostRegexp(`${MINIO_DOMAIN}`) && PathPrefix(`/${MINIO_BUCKET_NAME}`)
      - traefik.http.routers.minio.entrypoints=websecure
      - traefik.http.routers.minio.middlewares=response-compress
      - traefik.http.routers.minio.priority=10
      - traefik.http.routers.minio.tls=true
      - traefik.http.routers.minio.tls.certresolver=le
      - traefik.http.routers.minio.tls.domains[0].main=${MINIO_DOMAIN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    command: server --console-address ":9001" /data

  traefik:
    image: traefik:v2.11
    volumes:
      - ./compose/traefik:/config # Обязательный файл. Необходимо локально chmod 600 acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - backend
    env_file:
      - .env
    command:
      # - --log.level=DEBUG
      # - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --certificatesResolvers.le.acme.email=my-cool-email@example.git
      - --certificatesResolvers.le.acme.storage=/config/acme.json
      - --certificatesresolvers.le.acme.dnschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.le.acme.dnsChallenge.delayBeforeCheck=5
      - --certificatesResolvers.le.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53,208.67.222.220:53
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - backend
    dns:
      - 1.1.1.1
      - 1.0.0.1
    labels:
      - traefik.enable=false

networks:
  backend:
    external: false
